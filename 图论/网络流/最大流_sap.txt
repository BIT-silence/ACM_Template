//sap算法求最大流，src为源点，dst为汇点，点编号从0开始

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXV 1024
#define MAXE 100010
#define INF 0x3F3F3F3F

using namespace std;

template<typename F = int>
struct MaxFlow {
    struct Edge {
        int ed, nxt;
        F flow;
        Edge() {}
        Edge(int e, int n, F f) : ed(e), nxt(n), flow(f) {}
    } edge[MAXE];

    int head[MAXV], nV, nE;
    int dis[MAXV], cur[MAXV], gap[MAXV], que[MAXV], front, rear;

    void init(int v) {
        memset(head, -1, sizeof(head));
        nV = v; nE = 0;
    }

    void addEdge(int a, int b, F f) {
        edge[nE] = Edge(b, head[a], f); head[a] = nE++;
        edge[nE] = Edge(a, head[b], 0); head[b] = nE++;
    }

    bool bfs(int src, int dst) {
        int i, x, y;

        memset(dis, -1, sizeof(dis));
        memset(gap, 0, sizeof(gap));
        front = rear = 0;
        for (dis[que[rear++] = src] = 0; front < rear; ) {
            for (i = head[x = que[front++]]; ~i; i = edge[i].nxt) {
                if (edge[i ^ 1].flow && dis[y = edge[i].ed] == -1) {
                    ++gap[dis[y] = dis[x] + 1]; que[rear++] = y;
                }
            }
        }

        return ~dis[dst];
    }

    F aug(int src, int dst, int x, F pre) {
        int i, y, md = nV;
        F curFlow = pre, d;

        if (x == dst) return pre;
        for (i = cur[x]; ~i; i = edge[i].nxt) {
            if (edge[i].flow && dis[x] == dis[y = edge[i].ed] + 1) {
                d = aug(src, dst, y, min(curFlow, edge[i].flow));
                edge[i].flow -= d; edge[i ^ 1].flow += d; cur[x] = i;
                if (!(curFlow -= d) || dis[src] >= nV) return pre - curFlow;
            }
        }
        for (i = head[x]; ~i; i = edge[i].nxt) {
            if (edge[i].flow && md > dis[y = edge[i].ed]) {
                md = dis[y]; cur[x] = i;
            }
        }
        if (!(--gap[dis[x]])) dis[src] = nV;
        else ++gap[dis[x] = md + 1];

        return pre - curFlow;
    }

    F sap(int src, int dst) {
        F totFlow = 0;

        if (!bfs(dst, src)) return 0;
        memcpy(cur, head, sizeof(cur));
        while (dis[src] < nV) totFlow += aug(src, dst, src, INF);

        return totFlow;
    }
};

MaxFlow<> graph;
