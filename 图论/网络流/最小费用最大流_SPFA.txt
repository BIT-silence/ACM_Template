// 最小费用最大流spfa求增广路算法模板
// isFeasible = true 表示最小费用可行流

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXV 1024
#define MAXE 100010
#define INF 1000000000

using namespace std;

template<typename F = int, typename C = int>
struct MinCostFlow {
    struct Edge {
        int ed, nxt;
        F flow;
        C cost;
        Edge() {}
        Edge(int e, int n, int f, int c) :
            ed(e), nxt(n), flow(f), cost(c) {}
    } edge[MAXE];

    int head[MAXV], nV, nE;
    int pre[MAXV], now[MAXV], que[MAXV * MAXV * 2], front, rear;
    F his[MAXV];
    C dis[MAXV];
    bool vis[MAXV];

    void init(int v) {
        memset(head, -1, sizeof(head));
        nV = v; nE = 0;
    }

    void addEdge(int a, int b, F f, C c) {
        edge[nE] = Edge(b, head[a], f,  c); head[a] = nE++;
        edge[nE] = Edge(a, head[b], 0, -c); head[b] = nE++;
    }

    F minCostFlow(int src, int dst, C &netCost, bool isFeasible = false) {
        int i, x, y;
        F totFlow = 0;

        for (netCost = 0; ; ) {
            memset(dis, 0x3F, sizeof(dis));
            memset(vis, 0, sizeof(vis));
            front = rear = nV;
            dis[src] = 0; his[src] = INF;
            vis[que[rear++] = src] = true;
            while (front < rear) {
                vis[x = que[front++]] = false;
                for (i = head[x]; ~i; i = edge[i].nxt) {
                    if (edge[i].flow && dis[y = edge[i].ed] > dis[x] + edge[i].cost) {
                        dis[y] = dis[x] + edge[i].cost;
                        pre[y] = x; now[y] = i; his[y] = min(his[x], edge[i].flow);
                        if (!vis[y]) {
                            if (front < rear && dis[y] < dis[que[front]]) que[--front] = y;
                            else que[rear++] = y;
                            vis[y] = true;
                        }
                    }
                }
            }
            if (dis[dst] == INF) break;
            if (isFeasible && dis[dst] >= 0) break;
            totFlow += his[dst]; netCost += dis[dst] * his[dst];
            for (i = dst; i != src; i = pre[i]) {
                edge[now[i]].flow -= his[dst];
                edge[now[i] ^ 1].flow += his[dst];
            }
        }

        return totFlow;
    }
};

MinCostFlow<> graph;

