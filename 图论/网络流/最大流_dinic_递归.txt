// 递归版dinic，src为源点，dst为汇点，点编号从0开始

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXV 1024
#define MAXE 100010
#define INF 0x3F3F3F3F

using namespace std;

template<typename F = int>
struct MaxFlow {
    struct Edge {
        int ed, nxt;
        F flow;
        Edge() {}
        Edge(int e, int n, F f) : ed(e), nxt(n), flow(f) {}
    } edge[MAXE];

    int head[MAXV], nV, nE;
    int dis[MAXV], cur[MAXV], que[MAXV], front, rear;

    void init(int v) {
        memset(head, -1, sizeof(head));
        nV = v; nE = 0;
    }

    void addEdge(int a, int b, F f) {
        edge[nE] = Edge(b, head[a], f); head[a] = nE++;
        edge[nE] = Edge(a, head[b], 0); head[b] = nE++;
    }

    F dfs(int x, int dst, F pre) {
        int i, y;
        F curFlow = pre, d;

        if (x == dst) return pre;
        for (i = cur[x]; ~i; i = edge[i].nxt) {
            if (edge[i].flow && dis[y = edge[i].ed] == dis[x] + 1) {
                cur[x] = i;
                d = dfs(y, dst, min(curFlow, edge[i].flow));
                edge[i].flow -= d; edge[i ^ 1].flow += d;
                if (!(curFlow -= d)) break;
            }
        }
        if (curFlow) dis[x] = -1;

        return pre - curFlow;
    }

    bool bfs(int src, int dst) {
        int i, x, y;

        memset(dis, -1, sizeof(dis));
        front = rear = 0;
        for (dis[que[rear++] = src] = 0; front < rear; ) {
            for (i = head[x = que[front++]]; ~i; i = edge[i].nxt) {
                if (edge[i].flow && dis[y = edge[i].ed] == -1) {
                    dis[que[rear++] = y] = dis[x] + 1;
                    if (y == dst) return true;
                }
            }
        }

        return false;
    }

    F dinic(int src, int dst) {
        F totalFlow = 0;

        if (src == dst) return INF;
        while (bfs(src, dst)) {
            memcpy(cur, head, sizeof(head));
            totalFlow += dfs(src, dst, INF);
        }

        return totalFlow;
    }
};

MaxFlow<> maxFlow;