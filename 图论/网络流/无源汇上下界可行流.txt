// 求无源汇上下界可行流
// st[i]记录从i出发的流下界之和，ed[i]记录到达i的流的下界之和
// isFeasible() 返回可行流是否存在

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXV 1024
#define MAXE 100010
#define INF 0x3F3F3F3F

using namespace std;

template<typename F = int>
struct NetworkFlow {
    struct Edge {
        int u, v, nxt;
        F flow;
        Edge() {}
        Edge(int _u, int _v, int n, F f) : u(_u), v(_v), nxt(n), flow(f) {}
    } edge[MAXE];

    int head[MAXV], nV, nE;
    int dis[MAXV], pre[MAXV], cur[MAXV], cnt[MAXV], que[MAXV], front, rear;
    F his[MAXV], st[MAXV], ed[MAXV];

    void init(int v) {
        memset(head, -1, sizeof(head));
        memset(st, 0, sizeof(st));
        memset(ed, 0, sizeof(ed));
        nV = v + 2; nE = 0;
    }

    void addEdge(int a, int b, F f) {
        edge[nE] = Edge(a, b, head[a], f); head[a] = nE++;
        edge[nE] = Edge(b, a, head[b], 0); head[b] = nE++;
    }

    void addFlow(int a, int b, F low, F high) {
        addEdge(a, b, high - low);
        st[a] += low; ed[b] += low;
    }

    void bfs(int src) {
        int i, x, y;

        memset(dis, 0x3F, sizeof(dis));
        memset(cnt, 0, sizeof(cnt));
        front = rear = 0;
        ++cnt[dis[src] = 0]; que[rear++] = src;
        while (front < rear) {
            for (i = head[x = que[front++]]; ~i; i = edge[i].nxt) {
                if (edge[i ^ 1].flow && dis[y = edge[i].v] > dis[x] + 1) {
                    ++cnt[dis[y] = dis[x] + 1]; que[rear++] = y;
                }
            }
        }
    }

    F sap(int src, int dst) {
        int x, y, i, m;
        F curFlow = INF, totFlow = 0;
        bool tag;

        memcpy(cur, head, sizeof(cur));
        for (bfs(dst), x = src; dis[src] < nV; ) {
            his[x] = curFlow; tag = false;
            for (i = cur[x]; ~i; i = edge[i].nxt) {
                if (edge[i].flow && dis[x] == dis[y = edge[i].v] + 1) {
                    tag = true; pre[y] = cur[x] = i;
                    curFlow = min(curFlow, edge[i].flow);
                    if ((x = y) == dst) {
                        for (totFlow += curFlow; x != src; x = edge[pre[x]].u) {
                            edge[pre[x]].flow -= curFlow;
                            edge[pre[x] ^ 1].flow += curFlow;
                        }
                        curFlow = INF;
                    }
                    break;
                }
            }
            if (!tag) {
                for (m = nV, i = head[x]; ~i; i = edge[i].nxt) {
                    if (edge[i].flow && dis[y = edge[i].v] < m) {
                        m = dis[y]; cur[x] = i;
                    }
                }
                if (!(--cnt[dis[x]])) break;
                ++cnt[dis[x] = m + 1];
                if (x != src) curFlow = his[x = edge[pre[x]].u];
            }
        }

        return totFlow;
    }

    bool isFeasible() {
        int i, x = nV - 2, y = nV - 1;
        F sum = 0;

        for (i = 0; i < nV - 2; ++i) {
            if (st[i]) addEdge(i, x, st[i]);
            if (ed[i]) addEdge(y, i, ed[i]);
            sum += st[i];
        }

        return sap(y, x) == sum;
    }
};

NetworkFlow<> graph;