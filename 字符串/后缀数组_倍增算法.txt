// 倍增算法构造后缀数组 O(nlogn)
// sa[i] 表示排名为 i 的后缀, rank[i]表示第i个后缀的排名, height[i] 表示 sa[i] 与 sa[i - 1] 最长公共前缀
// 注意对于 height 数组进行栈扫描的应用

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

#define MAX 100010
#define EQ(s, a, b, l) (s[a] == s[b] && s[a + l] == s[b + l])

using namespace std;

char str[MAX];
int sa[MAX], rank[MAX], height[MAX];
int xa[MAX], xb[MAX], xv[MAX], xs[MAX];

void da(const char *s, int *sa, int n, int m = 128) {
    int i, l, p, *x = xa, *y = xb;

    fill(xs, xs + m, 0);
    for (i = 0; i <= n; ++i) ++xs[x[i] = s[i]];
    for (i = 1; i < m; ++i) xs[i] += xs[i - 1];
    for (i = n; ~i; --i) sa[--xs[x[i]]] = i;
    for (p = l = 1; p <= n; l <<= 1, m = p) {
        for (p = 0, i = n - l + 1; i <= n; ++i) y[p++] = i;
        for (i = 0; i <= n; ++i) {
            if (sa[i] >= l) y[p++] = sa[i] - l;
        }
        fill(xs, xs + m, 0);
        for (i = 0; i <= n; ++i) ++xs[xv[i] = x[y[i]]];
        for (i = 1; i < m; ++i) xs[i] += xs[i - 1];
        for (i = n; ~i; --i) sa[--xs[xv[i]]] = y[i];
        for (swap(x, y), x[sa[0]] = 0, p = i = 1; i <= n; ++i) {
            x[sa[i]] = EQ(y, sa[i - 1], sa[i], l) ? p - 1 : p++;
        }
    }
}

void calHeight(const char *s, const int *sa, int *rank, int *height, int n) {
    int i, j, k = 0;

    for (i = 0; i <= n; ++i) rank[sa[i]] = i;
    for (i = 0; i < n; height[rank[i++]] = k) {
        for(k = k ? k - 1 : 0, j = sa[rank[i] - 1]; s[i + k] == s[j + k]; ++k);
    }
}