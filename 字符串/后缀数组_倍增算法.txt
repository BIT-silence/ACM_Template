// 倍增算法构造后缀数组 O(nlogn)
// sa[i] 表示排名为 i 的后缀, rank[i]表示第i个后缀的排名, height[i] 表示 sa[i] 与 sa[i - 1] 最长公共前缀
// 支持对于任意类型子序列进行求解，主意原序列中所有数据为正，原序列范围较大需要离散化
// 注意需要手动调用 calHeight()

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

#define MAX 100010

using namespace std;

template<typename T = char>
struct SuffixArray {
    T str[MAX];
    int sa[MAX], rank[MAX], height[MAX], sz;
    int wa[MAX], wb[MAX], wv[MAX], ws[MAX];

    int &operator [](int k) { return sa[k]; }

    int size() const { return sz; }

    bool cmp(const int *r, int a, int b, int l) const {
        return r[a] == r[b] && r[a + l] == r[b + l];
    }

    void build(const T *s, int n, int m = 128) {
        int i, l, p, *x = wa, *y = wb;

        memcpy(str, s, n * sizeof(T));
        str[n] = 0; sz = n + 1;
        fill(ws, ws + m, 0);
        for (i = 0; i <= n; ++i) ++ws[x[i] = str[i]];
        for (i = 1; i < m; ++i) ws[i] += ws[i - 1];
        for (i = n; ~i; --i) sa[--ws[x[i]]] = i;
        for (p = l = 1; p <= n; l <<= 1, m = p) {
            for (p = 0, i = n - l + 1; i <= n; ++i) y[p++] = i;
            for (i = 0; i <= n; ++i) {
                if (sa[i] >= l) y[p++] = sa[i] - l;
            }
            fill(ws, ws + m, 0);
            for (i = 0; i <= n; ++i) ++ws[wv[i] = x[y[i]]];
            for (i = 1; i < m; ++i) ws[i] += ws[i - 1];
            for (i = n; ~i; --i) sa[--ws[wv[i]]] = y[i];
            for (swap(x, y), x[sa[0]] = 0, p = i = 1; i <= n; ++i) {
                x[sa[i]] = cmp(y, sa[i - 1], sa[i], l) ? p - 1 : p++;
            }
        }
    }

    void calHeight() {
        int i, j, k = 0;
        for (i = 0; i < sz; ++i) rank[sa[i]] = i;
        for (i = 0; i < sz; height[rank[i++]] = k) {
            for(k ? --k : 0, j = sa[rank[i] - 1]; str[i + k] == str[j + k]; ++k);
        }
    }
};

SuffixArray<> sa;