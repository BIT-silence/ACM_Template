// AC自动机建立
// MAXC 为字符集大小，使用时根据字符集改写 chidx 函数
// 使用时根据需求修改 acc 标记，并添加 match, solve 等求解函数

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXC 26
#define MAXN 1024
#define MAXL 1024

using namespace std;

template<typename T, typename HashFunc>
struct ACAutomaton {
    struct Node {
        int nxt[MAXC], fail, acc;
        Node() : fail(-1), acc(0) { memset(nxt, -1, sizeof(nxt)); }
    } q[MAXN];

    int que[MAXN], front, rear, sz;
    HashFunc chidx;

    Node &operator [](int k) { return q[k]; }

    int size() const { return sz; }

    void clear() {
        fill(q, q + MAXN, Node());
        sz = 1;
    }

    void insert(const T *str, int n) {
        int x = 0, i;
        for (i = 0; i < n; ++i) {
            if (q[x].nxt[chidx(str[i])] == -1) q[x].nxt[chidx(str[i])] = sz++;
            x = q[x].nxt[chidx(str[i])];
        }
        q[x].acc = 1;
    }

    void build() {
        int x, y, i;
        front = rear = 0;
        for (que[rear++] = 0; front < rear; ) {
            for (x = que[front++], i = 0; i < MAXC; ++i) {
                if ((y = q[x].nxt[i]) == -1) q[x].nxt[i] = x ? q[q[x].fail].nxt[i] : 0;
                else {
                    q[y].fail = x ? q[q[x].fail].nxt[i] : 0;
                    q[y].acc |= q[q[y].fail].acc;
                    que[rear++] = y;
                }
            }
        }
    }
};

struct HashFunc {
    int operator ()(char ch) const { return ch - 'A'; }
};

ACAutomaton<char, HashFunc> ac;

