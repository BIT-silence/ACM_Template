// AC自动机建立
// MAXC 为字符集大小，使用时根据字符集改写 chidx 函数，p - ac[0] 为 p 对应下标

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXC 26
#define MAXN 1024
#define MAXL 1024

using namespace std;

struct ACAutomation {
    struct ACNode {
        ACNode *nxt[MAXC], *fail;
        int acc;
    } v[MAXN], *que[MAXN];

    int tot, front, rear;

    int chidx(char ch) {
        return ch - 'A';
    }

    const ACNode *operator [](int k) const {
        return v + k;
    }

    void clear() {
        memset(v, 0, sizeof(v));
        tot = 1;
    }

    void insert(const char *str) {
        ACNode *p;
        for (p = v; *str; ++str) {
            if (!p->nxt[chidx(*str)]) p->nxt[chidx(*str)] = v + tot++;
            p = p->nxt[chidx(*str)];
        }
        p->acc = 1;
    }

    void build() {
        int i;
        ACNode *p;
        front = rear = 0; v->fail = v;
        for (que[rear++] = v; front < rear; ) {
            for (p = que[front++], i = 0; i < MAXC; ++i) {
                if (!p->nxt[i]) p->nxt[i] = (p == v) ? v : p->fail->nxt[i];
                else {
                    p->nxt[i]->fail = (p == v) ? v : p->fail->nxt[i];
                    p->nxt[i]->acc |= p->nxt[i]->fail->acc;
                    que[rear++] = p->nxt[i];
                }
            }
        }
    }
} ac;

