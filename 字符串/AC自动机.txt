// AC自动机建立
// MAXC 为字符集大小，使用时根据字符集改写 chidx 函数，并修改 acc 标记

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAXC 26
#define MAXN 1024
#define MAXL 1024

using namespace std;

struct ACAutomation {
    struct ACNode {
        int nxt[MAXC], fail, acc;
    } q[MAXN];

    int que[MAXN], front, rear, tot;

    static int chidx(char ch) {
        return ch - 'A';
    }

    const ACNode &operator [](int k) const {
        return q[k];
    }

    void clear() {
        memset(q, 0, sizeof(q));
        tot = 1;
    }

    void insert(const char *str) {
        int i;
        for (i = 0; *str; ++str) {
            if (!q[i].nxt[chidx(*str)]) q[i].nxt[chidx(*str)] = tot++;
            i = q[i].nxt[chidx(*str)];
        }
        q[i].acc = 1;
    }

    void build() {
        int x, y, i;
        front = rear = 0;
        for (que[rear++] = 0; front < rear; ) {
            for (x = que[front++], i = 0; i < MAXC; ++i) {
                if (!(y = q[x].nxt[i])) q[x].nxt[i] = x ? q[q[x].fail].nxt[i] : 0;
                else {
                    q[y].fail = x ? q[q[x].fail].nxt[i] : 0;
                    q[y].acc |= q[q[y].fail].acc;
                    que[rear++] = y;
                }
            }
        }
    }
} ac;

