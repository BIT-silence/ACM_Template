// 基本多回路插头dp，求回路数
// mat[x][y] = 1 表示可走, x,y 均从 1 开始计数

#include <iostream>
#include <cstdio>
#include <cstring>

#define MAX 12

typedef __int64 i64;

using namespace std;

int sta[2][1 << MAX], tot[2];

int mat[MAX][MAX];
i64 dp[2][1 << MAX];

void update(int x, int key, i64 val) {
    if (!dp[x][key]) sta[x][tot[x]++] = key;
    dp[x][key] += val;
}

i64 solve(int n, int m) {
    int i, j, k, x = 0, tag, cur;

    memset(dp, 0, sizeof(dp));
    tot[0] = tot[1] = 0;
    update(0, 0, 1);
    for (i = 1; i <= n; ++i) {
        for (j = 0; j <= m; ++j, tot[x] = 0, x ^= 1) {
            for (k = 0; k < tot[x]; ++k, dp[x][cur] = 0) {
                cur = sta[x][k];
                if (i == n && j == m && !cur) return dp[x][0];
                if (j == m) {
                    if (i < n && !(cur & (1 << m))) update(x ^ 1, cur << 1, dp[x][cur]);
                } else {
                    if (!(tag = (cur >> j) & 3)) {
                        update(x ^ 1, mat[i][j + 1] ? (cur ^ (3 << j)) : cur, dp[x][cur]);
                    } else if (mat[i][j + 1] && (tag == 1 || tag == 2)) {
                        update(x ^ 1, cur, dp[x][cur]);
                        update(x ^ 1, cur ^ (3 << j), dp[x][cur]);
                    } else if (mat[i][j + 1]) {
                        update(x ^ 1, cur ^ (3 << j), dp[x][cur]);
                    }
                }
            }
        }
    }

    return 0;
}

