#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <queue>

#define MAX 9
#define MAXN 400000
#define END 322560
#define INF 1000000000
#define _R(x) ((x) / 3)
#define _C(x) ((x) % 3)

using namespace std;

const char mov[] = {"udlr"};
const int step[] = {-3, 3, -1, 1};
const int fac[] = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};

struct State {
    int data[MAX], p, key, f, g, h;

    bool operator <(const State &s) const {
        return s.f < f;
    }
};

priority_queue<State> que;

int dis[MAXN], pre[MAXN];
bool vis[MAXN];
char trace[MAXN], path[MAXN];

bool check(const State &x) {
    int i, j, cnt = 0;

    for (i = 0; i < MAX; ++i) {
        for (j = i + 1; j < MAX; ++j) {
            cnt += (x.data[j] && (x.data[j] < x.data[i]));
        }
    }

    return !(cnt & 1);
}

int getHash(const State &x) {
    int i, j, ret = 0, cnt;

    for (i = 1; i < MAX; ++i) {
        for (cnt = j = 0; j < i; ++j) {
            cnt += (x.data[i] < x.data[j]);
        }
        ret += cnt * fac[i];
    }

    return ret;
}

int evalue(const State &x) {
    int i, ret = 0;

    for (i = 0; i < MAX; ++i) {
        if (x.data[i]) ret += abs(_R(i) - _R(x.data[i] - 1)) + abs(_C(i) - _C(x.data[i] - 1));
    }

    return ret;
}

inline int valid(int x, int d) {
    switch (d) {
        case 0: return _R(x);
        case 1: return _R(x) ^ 2;
        case 2: return _C(x);
        case 3: return _C(x) ^ 2;
    }
    return 0;
}

inline void doMove(State &cur, int d) {
    swap(cur.data[cur.p], cur.data[cur.p + step[d]]);
    cur.p += step[d]; cur.key = getHash(cur);
    cur.f = (++cur.g) + (cur.h = evalue(cur));
}

int astar(State &src) {
    State cur, nxt;
    int i;

    while (!que.empty()) que.pop();
    fill(dis, dis + MAXN, INF);
    memset(vis, 0, sizeof(vis));
    memset(pre, -1, sizeof(pre));

    src.key = getHash(src);
    src.f = (src.g = 0) + (src.h = evalue(src));
    dis[src.key] = 0;

    for (que.push(src); !que.empty(); ) {
        cur = que.top(); que.pop();
        if (!cur.h) return cur.g;
        if (vis[cur.key]) continue;
        vis[cur.key] = true;
        for (i = 0; i < 4; ++i) {
            if (valid(cur.p, i)) {
                doMove(nxt = cur, i);
                if (!vis[nxt.key] && dis[nxt.key] > nxt.g) {
                    dis[nxt.key] = nxt.g;
                    pre[nxt.key] = cur.key; path[nxt.key] = mov[i];
                    que.push(nxt);
                }
            }
        }
    }

    return -1;
}

int main() {
    int t, i, w;
    char ch[4];
    State src;

    scanf("%d", &t);
    while (t--) {
        for (i = 0; i < MAX; ++i) {
            scanf("%s", ch);
            if (ch[0] != 'x') src.data[i] = ch[0] - '0';
            else src.data[src.p = i] = 0;
        }

        if (!check(src)) printf("unsolvable\n");
        else {
            astar(src);
            for (w = 0, i = END; ~pre[i]; i = pre[i]) trace[w++] = path[i];
            for (i = w - 1; ~i; --i) putchar(trace[i]);
            putchar('\n');
        }
        if (t) putchar('\n');
    }

    return 0;
}
