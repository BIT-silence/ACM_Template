// DLX解数独
// 结果原地存储，使用时需要根据问题修改求解添加规则和结果输出

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>

#define MAX 100010
#define MAXR 1024
#define MAXC 512
#define N 9
#define M 3
#define COL 324

using namespace std;

struct DLX {
    int l[MAX], r[MAX], u[MAX], d[MAX], x[MAX], y[MAX];
    int sum[MAXC], ans[MAXR], tot, cnt;

    void init(int c) {
        int i;

        for (i = 0; i <= c; ++i) {
            l[i] = i - 1; r[i] = i + 1; u[i] = i; d[i] = i;
        }
        l[0] = c; r[c] = 0; tot = c;
        memset(sum, 0, sizeof(sum));
    }

    void addRow(int row, int *cols, int n) {
        int cur = tot + 1, col, i;

        sort(cols, cols + n);
        for (i = 0; i < n; ++i) {
            col = cols[i]; ++sum[col]; ++tot;
            l[tot] = tot - 1; r[tot] = tot + 1; d[tot] = col; u[tot] = u[col];
            d[u[col]] = tot; u[col] = tot; x[tot] = row; y[tot] = col;
        }
        l[cur] = tot; r[tot] = cur;
    }

    void cover(int c) {
        int i, j;

        l[r[c]] = l[c]; r[l[c]] = r[c];
        for (i = d[c]; i != c; i = d[i]) {
            for (j = r[i]; j != i; j = r[j]) {
                u[d[j]] = u[j]; d[u[j]] = d[j]; --sum[y[j]];
            }
        }
    }

    void recover(int c) {
        int i, j;

        for (i = u[c]; i != c; i = u[i]) {
            for (j = l[i]; j != i; j = l[j]) {
                ++sum[y[j]]; u[d[j]] = j; d[u[j]] = j;
            }
        }
        l[r[c]] = c; r[l[c]] = c;
    }

    int dlx(int dep = 0) {
        int i, j, c, ret;

        if (!r[0]) return cnt = dep;
        for (c = i = r[0]; i; i = r[i]) {
            if (sum[i] < sum[c]) c = i;
        }
        cover(c);
        for (i = d[c]; i != c; i = d[i]) {
            ans[dep] = x[i];
            for (j = r[i]; j != i; j = r[j]) cover(y[j]);
            if (~(ret = dlx(dep + 1))) return ret;
            for (j = l[i]; j != i; j = l[j]) recover(y[j]);
        }
        recover(c);

        return -1;
    }
} dlx;

int mat[N][N], cols[N];

inline int encode(int a, int b, int c) {
    return a * N * N + b * N + c + 1;
}

inline void decode(int x, int &a, int &b, int &c) {
    --x;
    c = x % N; x /= N;
    b = x % N; x /= N;
    a = x;
}

bool solve(int mat[N][N]) {
    int i, j, x, y, v;

    dlx.init(COL);
    for (i = 0; i < N; ++i) {
        for (j = 0; j < N; ++j) {
            for (v = 0; v < N; ++v) {
                if (!mat[i][j] || mat[i][j] == v + 1) {
                    cols[0] = encode(0, i, j);
                    cols[1] = encode(1, i, v);
                    cols[2] = encode(2, j, v);
                    cols[3] = encode(3, i / M * M + j / M, v);
                    dlx.addRow(encode(i, j, v), cols, 4);
                }
            }
        }
    }
    if (dlx.dlx() == -1) return false;
    for (i = 0; i < dlx.cnt; ++i) {
        decode(dlx.ans[i], x, y, v);
        mat[x][y] = v + 1;
    }

    return true;
}
